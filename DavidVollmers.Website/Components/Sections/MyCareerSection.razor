@using Ignis.Components.Web
@using Ignis.Components.HeroIcons.Outline
@using System.Globalization
@inherits IgnisComponentBase
@inject IStringLocalizer<Resources> Resources

<section class="px-6 py-32 lg:px-8" aria-labelledby="my-career">
    <div class="mx-auto max-w-3xl text-base leading-7 text-gray-300">
        <h1 id="my-career" class="mt-2 text-3xl font-bold tracking-tight text-gray-100 sm:text-4xl">
            @Resources["MyCareerHeading"]
        </h1>
        <p class="mt-6 text-xl leading-8">
            <i>@Resources["MyCareerText"]</i>
        </p>
        @foreach (var path in _careerPath)
        {
            <div class="mt-10 max-w-2xl">
                <div class="flow-root">
                    <ul role="list" class="-mb-8">
                        @for (var index = 0; index < path.Length; index++)
                        {
                            var node = path[index];
                            <li @key="index">
                                <div class="relative pb-8">
                                    @if (index != path.Length - 1)
                                    {
                                        <span class="absolute left-5 top-5 -ml-px h-full w-0.5 bg-white/10" aria-hidden="true"></span>
                                    }
                                    <div class="relative flex items-start space-x-3">
                                        @* ReSharper disable once SwitchStatementHandlesSomeKnownEnumValuesWithDefault *@
                                        @switch (node.Type)
                                        {
                                            case CareerPathType.Latest:
                                                <div class="relative">
                                                    <Dynamic AsComponent="@node.Icon"
                                                             class="@Css.Class("flex h-10 w-10 items-center justify-center rounded-lg ring-8 ring-gunmetal", node)"/>
                                                </div>
                                                <div class="min-w-0 flex-1">
                                                    <div>
                                                        <div class="text-sm">
                                                            <a href="@node.Link" class="font-medium text-gray-100">
                                                                @node.Title
                                                            </a>
                                                        </div>
                                                        <p class="mt-0.5 text-sm text-gray-300">
                                                            @FormatTimeSpan(node)
                                                        </p>
                                                    </div>
                                                    <div class="mt-2 text-sm text-gray-400">
                                                        @node.Description
                                                    </div>
                                                </div>
                                                break;
                                            case CareerPathType.Descendant:
                                                <div>
                                                    <div class="relative px-1">
                                                        <div class="@Css.Class("flex h-8 w-8 items-center justify-center rounded-lg ring-8 ring-gunmetal", node)">
                                                            <Dynamic AsComponent="@node.Icon" class="h-5 w-5"/>
                                                        </div>
                                                    </div>
                                                </div>
                                                <div class="min-w-0 flex-1 py-1.5">
                                                    <div class="text-sm text-gray-400">
                                                        <span class="font-medium text-gray-100">@node.Title</span>@(' ')
                                                        <span class="whitespace-nowrap">
                                                            @Resources["From"]
                                                            @node.From.ToString("MMM yyyy", CultureInfo.CurrentUICulture)
                                                            @Resources["To"]
                                                            @node.To.ToString("MMM yyyy", CultureInfo.CurrentUICulture)
                                                            &middot;
                                                            @FormatTimeSpan(node)
                                                        </span>
                                                    </div>
                                                </div>
                                                break;
                                        }
                                    </div>
                                </div>
                            </li>
                        }
                    </ul>
                </div>
            </div>
        }
    </div>
</section>

@code
{
    private readonly CareerPathNode[][] _careerPath =
    {
        new CareerPathNode[]
        {
            new()
            {
                Type = CareerPathType.Latest,
                Icon = typeof(Matrix42LogoIcon),
                CssClass = "bg-white",
                Link = "https://www.matrix42.com/en/",
                Title = "Matrix42",
                From = new DateTime(2018, 12, 1),
                To = DateTime.Now,
                Description = Website.Resources.Matrix42Description
            },
            new()
            {
                Type = CareerPathType.Descendant,
                Icon = typeof(UserCircleIcon),
                CssClass = "bg-orange-500 text-white",
                Title = "Technical Lead",
                From = new DateTime(2023, 2, 1),
                To = DateTime.Now
            },
            new()
            {
                Type = CareerPathType.Descendant,
                Icon = typeof(UserCircleIcon),
                CssClass = "bg-orange-600 text-white",
                Title = "Software Engineer",
                From = new DateTime(2018, 12, 1),
                To = new DateTime(2023, 1, 31)
            }
        },
        new CareerPathNode[]
        {
            new()
            {
                Type = CareerPathType.Latest,
                Icon = typeof(MgSoftechLogoIcon),
                CssClass = "bg-white",
                Link = "https://www.mgsoftech.com/",
                Title = "mg.softech",
                From = new DateTime(2014, 6, 1),
                To = new DateTime(2018, 11, 30),
                Description = Website.Resources.MgSoftechDescription
            },
            new()
            {
                Type = CareerPathType.Descendant,
                Icon = typeof(UserCircleIcon),
                CssClass = "bg-white text-gunmetal",
                Title = "Software Engineer",
                From = new DateTime(2017, 6, 1),
                To = new DateTime(2018, 11, 30)
            },
            new()
            {
                Type = CareerPathType.Descendant,
                Icon = typeof(AcademicCapIcon),
                CssClass = "bg-white text-gunmetal",
                Title = "Apprenticeship",
                From = new DateTime(2014, 6, 1),
                To = new DateTime(2017, 5, 31)
            }
        }
    };

    private string FormatTimeSpan(CareerPathNode node)
    {
        var timeSpan = node.To - node.From;
        var years = timeSpan.Days / 365;
        var months = (int)Math.Ceiling(timeSpan.Days / 30.437 - years * 12);
        if (years == 0) return $"{months} {Resources["Months"]}";
        return months == 0 ? $"{years} {Resources["Years"]}" : $"{years} {Resources["Years"]} {months} {Resources["Months"]}";
    }

    private class CareerPathNode : ICssClass
    {
        public CareerPathType Type { get; set; }

        public Type Icon { get; set; } = null!;

        public string? CssClass { get; set; }

        public string? Link { get; set; }

        public string Title { get; set; } = null!;

        public DateTime From { get; set; }

        public DateTime To { get; set; }

        public string? Description { get; set; }
    }

    private enum CareerPathType
    {
        Latest,
        Descendant,
    }
}